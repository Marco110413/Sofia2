#!/bin/bash

# Archivo de log de errores
LOG="errores.log"
> "$LOG"  # Limpiar el log antes de cada ejecuci√≥n

# Funci√≥n para mostrar proyectos disponibles
seleccionar_proyecto() {
    echo "üîπ Buscando proyectos disponibles..."
    proyectos=($(ls -d */ 2>/dev/null)) # Listar solo directorios
    if [[ ${#proyectos[@]} -eq 0 ]]; then
        echo "‚ùå No se encontraron proyectos en el directorio actual."
        exit 1
    fi

    while true; do
        echo "üîπ Selecciona un proyecto para analizar:"
        echo "0) ‚¨ÖÔ∏è Volver"
        for i in "${!proyectos[@]}"; do
            echo "$((i + 1))) ${proyectos[i]}"
        done

        read -p "#? " opcion
        if [[ "$opcion" == "0" ]]; then
            echo "‚Ü©Ô∏è Regresando..."
            exit 0
        elif [[ "$opcion" -gt 0 && "$opcion" -le ${#proyectos[@]} ]]; then
            PROYECTO="${proyectos[$((opcion - 1))]}"
            echo "üìÇ Proyecto seleccionado: $PROYECTO"
            analizar_proyecto
            return
        else
            echo "‚ùå Opci√≥n inv√°lida. Intenta de nuevo."
        fi
    done
}

# Funci√≥n para analizar errores en scripts dentro del proyecto seleccionado
analizar_proyecto() {
    if [[ -z "$PROYECTO" ]]; then
        echo "‚ùå No hay un proyecto seleccionado."
        return
    fi

    cd "$PROYECTO" || { echo "‚ùå No se pudo acceder a '$PROYECTO'."; return; }

    while true; do
        scripts=($(find . -maxdepth 1 -name "*.sh" 2>/dev/null))
        if [[ ${#scripts[@]} -eq 0 ]]; then
            echo "‚ö†Ô∏è No hay scripts en '$PROYECTO'."
            cd ..
            seleccionar_proyecto  # Regresar a la selecci√≥n de proyecto en vez de salir
            return
        fi

        echo "üîπ Selecciona un script para analizar:"
        echo "0) ‚¨ÖÔ∏è Volver"
        for i in "${!scripts[@]}"; do
            echo "$((i + 1))) ${scripts[i]}"
        done

        read -p "#? " opcion_script
        if [[ "$opcion_script" == "0" ]]; then
            cd ..
            seleccionar_proyecto  # Regresar a la selecci√≥n de proyecto en vez de salir
            return
        elif [[ "$opcion_script" -gt 0 && "$opcion_script" -le ${#scripts[@]} ]]; then
            SCRIPT="${scripts[$((opcion_script - 1))]}"
            echo "üìú Analizando: $SCRIPT"
            break
        else
            echo "‚ùå Opci√≥n inv√°lida."
        fi
    done

    # Verificar permisos de ejecuci√≥n
    if [[ ! -x "$SCRIPT" ]]; then
        echo "‚ö†Ô∏è '$SCRIPT' no tiene permisos de ejecuci√≥n. Corrigiendo..."
        chmod +x "$SCRIPT" || { echo "‚ùå No se pudo corregir permisos."; return; }
        echo "‚úÖ Permisos corregidos."
    fi

    # Verificar errores de sintaxis
    echo "üîç Verificando sintaxis..."
    bash -n "$SCRIPT" 2>> "$LOG"
    if [[ $? -ne 0 ]]; then
        echo "‚ùå Errores de sintaxis en '$SCRIPT'. Revisa '$LOG'."
        return
    fi
    echo "‚úÖ Sintaxis correcta."

    # Ejecutar el script con debug
    echo "üîç Ejecutando '$SCRIPT' en modo debug..."
    bash -x "$SCRIPT" 2>> "$LOG"
    if [[ $? -ne 0 ]]; then
        echo "‚ùå Errores en ejecuci√≥n. Revisa '$LOG'."
        return
    fi
    echo "‚úÖ Script ejecutado correctamente."
}

# Ejecutar funciones
seleccionar_proyecto
